/*
 * GymApp
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from '../ApiClient'
import { PassBoughtEvent } from '../model/PassBoughtEvent'

/**
 * PassBoughtEvents service.
 * @module api/PassBoughtEventsApi
 * @version 1.0
 */
export class PassBoughtEventsApi {
  /**
    * Constructs a new PassBoughtEventsApi. 
    * @alias module:api/PassBoughtEventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance
  }

  /**
   * Callback function to receive the result of the apiPassBoughtEventsDeactivatePassPassBoughtEventIdPut operation.
   * @callback moduleapi/PassBoughtEventsApi~apiPassBoughtEventsDeactivatePassPassBoughtEventIdPutCallback
   * @param {String} error Error message, if any.
   * @param {module:model/PassBoughtEvent{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {String} passBoughtEventId
   * @param {module:api/PassBoughtEventsApi~apiPassBoughtEventsDeactivatePassPassBoughtEventIdPutCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  apiPassBoughtEventsDeactivatePassPassBoughtEventIdPut(
    passBoughtEventId,
    callback
  ) {
    let postBody = null
    // verify the required parameter 'passBoughtEventId' is set
    if (passBoughtEventId === undefined || passBoughtEventId === null) {
      throw new Error(
        "Missing the required parameter 'passBoughtEventId' when calling apiPassBoughtEventsDeactivatePassPassBoughtEventIdPut"
      )
    }

    let pathParams = {
      passBoughtEventId: passBoughtEventId,
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = []
    let contentTypes = []
    let accepts = ['text/plain', 'application/json', 'text/json']
    let returnType = PassBoughtEvent

    return this.apiClient.callApi(
      '/api/PassBoughtEvents/DeactivatePass/{passBoughtEventId}',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    )
  }
  /**
   * Callback function to receive the result of the apiPassBoughtEventsExtendPassValidityPassBoughtEventIdPut operation.
   * @callback moduleapi/PassBoughtEventsApi~apiPassBoughtEventsExtendPassValidityPassBoughtEventIdPutCallback
   * @param {String} error Error message, if any.
   * @param {module:model/PassBoughtEvent{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {String} passBoughtEventId
   * @param {Object} opts Optional parameters
   * @param {Number} opts.extension
   * @param {module:api/PassBoughtEventsApi~apiPassBoughtEventsExtendPassValidityPassBoughtEventIdPutCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  apiPassBoughtEventsExtendPassValidityPassBoughtEventIdPut(
    passBoughtEventId,
    opts,
    callback
  ) {
    opts = opts || {}
    let postBody = null
    // verify the required parameter 'passBoughtEventId' is set
    if (passBoughtEventId === undefined || passBoughtEventId === null) {
      throw new Error(
        "Missing the required parameter 'passBoughtEventId' when calling apiPassBoughtEventsExtendPassValidityPassBoughtEventIdPut"
      )
    }

    let pathParams = {
      passBoughtEventId: passBoughtEventId,
    }
    let queryParams = {
      extension: opts['extension'],
    }
    let headerParams = {}
    let formParams = {}

    let authNames = []
    let contentTypes = []
    let accepts = ['text/plain', 'application/json', 'text/json']
    let returnType = PassBoughtEvent

    return this.apiClient.callApi(
      '/api/PassBoughtEvents/ExtendPassValidity/{passBoughtEventId}',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    )
  }
  /**
   * Callback function to receive the result of the apiPassBoughtEventsGet operation.
   * @callback moduleapi/PassBoughtEventsApi~apiPassBoughtEventsGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/PassBoughtEvent>{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {module:api/PassBoughtEventsApi~apiPassBoughtEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  apiPassBoughtEventsGet(callback) {
    let postBody = null

    let pathParams = {}
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = []
    let contentTypes = []
    let accepts = ['text/plain', 'application/json', 'text/json']
    let returnType = [PassBoughtEvent]

    return this.apiClient.callApi(
      '/api/PassBoughtEvents',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    )
  }
  /**
   * Callback function to receive the result of the apiPassBoughtEventsGetActivePassesClientIdGet operation.
   * @callback moduleapi/PassBoughtEventsApi~apiPassBoughtEventsGetActivePassesClientIdGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/PassBoughtEvent>{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {String} clientId
   * @param {module:api/PassBoughtEventsApi~apiPassBoughtEventsGetActivePassesClientIdGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  apiPassBoughtEventsGetActivePassesClientIdGet(clientId, callback) {
    let postBody = null
    // verify the required parameter 'clientId' is set
    if (clientId === undefined || clientId === null) {
      throw new Error(
        "Missing the required parameter 'clientId' when calling apiPassBoughtEventsGetActivePassesClientIdGet"
      )
    }

    let pathParams = {
      clientId: clientId,
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = []
    let contentTypes = []
    let accepts = ['text/plain', 'application/json', 'text/json']
    let returnType = [PassBoughtEvent]

    console.log(clientId)
    return this.apiClient.callApi(
      '/api/PassBoughtEvents/GetActivePasses/{clientId}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    )
  }
  /**
   * Callback function to receive the result of the apiPassBoughtEventsIdDelete operation.
   * @callback moduleapi/PassBoughtEventsApi~apiPassBoughtEventsIdDeleteCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {String} id
   * @param {module:api/PassBoughtEventsApi~apiPassBoughtEventsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
   */
  apiPassBoughtEventsIdDelete(id, callback) {
    let postBody = null
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling apiPassBoughtEventsIdDelete"
      )
    }

    let pathParams = {
      id: id,
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = []
    let contentTypes = []
    let accepts = []
    let returnType = null

    return this.apiClient.callApi(
      '/api/PassBoughtEvents/{id}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    )
  }
  /**
   * Callback function to receive the result of the apiPassBoughtEventsIdGet operation.
   * @callback moduleapi/PassBoughtEventsApi~apiPassBoughtEventsIdGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/PassBoughtEvent{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {String} id
   * @param {module:api/PassBoughtEventsApi~apiPassBoughtEventsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  apiPassBoughtEventsIdGet(id, callback) {
    let postBody = null
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling apiPassBoughtEventsIdGet"
      )
    }

    let pathParams = {
      id: id,
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = []
    let contentTypes = []
    let accepts = ['text/plain', 'application/json', 'text/json']
    let returnType = PassBoughtEvent

    return this.apiClient.callApi(
      '/api/PassBoughtEvents/{id}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    )
  }
  /**
   * Callback function to receive the result of the apiPassBoughtEventsIdPut operation.
   * @callback moduleapi/PassBoughtEventsApi~apiPassBoughtEventsIdPutCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {String} id
   * @param {Object} opts Optional parameters
   * @param {module:model/PassBoughtEvent} opts.body
   * @param {module:api/PassBoughtEventsApi~apiPassBoughtEventsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
   */
  apiPassBoughtEventsIdPut(id, opts, callback) {
    opts = opts || {}
    let postBody = opts['body']
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling apiPassBoughtEventsIdPut"
      )
    }

    let pathParams = {
      id: id,
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = []
    let contentTypes = ['application/json', 'text/json', 'application/_*+json']
    let accepts = []
    let returnType = null

    return this.apiClient.callApi(
      '/api/PassBoughtEvents/{id}',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    )
  }
  /**
   * Callback function to receive the result of the apiPassBoughtEventsPost operation.
   * @callback moduleapi/PassBoughtEventsApi~apiPassBoughtEventsPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/PassBoughtEvent{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Object} opts Optional parameters
   * @param {module:model/PassBoughtEvent} opts.body
   * @param {module:api/PassBoughtEventsApi~apiPassBoughtEventsPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  apiPassBoughtEventsPost(opts, callback) {
    opts = opts || {}
    let postBody = opts['body']

    let pathParams = {}
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = []
    let contentTypes = ['application/json', 'text/json', 'application/_*+json']
    let accepts = ['text/plain', 'application/json', 'text/json']
    let returnType = PassBoughtEvent

    return this.apiClient.callApi(
      '/api/PassBoughtEvents',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    )
  }
}
